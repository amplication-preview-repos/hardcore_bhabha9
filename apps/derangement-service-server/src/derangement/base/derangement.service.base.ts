/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Derangement as PrismaDerangement } from "@prisma/client";

export class DerangementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DerangementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.derangement.count(args);
  }

  async derangements(
    args: Prisma.DerangementFindManyArgs
  ): Promise<PrismaDerangement[]> {
    return this.prisma.derangement.findMany(args);
  }
  async derangement(
    args: Prisma.DerangementFindUniqueArgs
  ): Promise<PrismaDerangement | null> {
    return this.prisma.derangement.findUnique(args);
  }
  async createDerangement(
    args: Prisma.DerangementCreateArgs
  ): Promise<PrismaDerangement> {
    return this.prisma.derangement.create(args);
  }
  async updateDerangement(
    args: Prisma.DerangementUpdateArgs
  ): Promise<PrismaDerangement> {
    return this.prisma.derangement.update(args);
  }
  async deleteDerangement(
    args: Prisma.DerangementDeleteArgs
  ): Promise<PrismaDerangement> {
    return this.prisma.derangement.delete(args);
  }
}
